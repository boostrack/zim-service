import org.gradle.api.*
import org.gradle.api.tasks.*

buildscript {
    repositories {
        mavenCentral()
        maven { url "http://repo.spring.io/libs-snapshot" }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:1.0.0.RC3"
    }
}

apply plugin: 'spring-boot'
apply plugin: 'groovy'

repositories {
    maven {
        mavenCentral()
        url 'http://repo.spring.io/milestone'
    }
}

dependencies {
    compile "org.codehaus.groovy:groovy:2.2.2"
    compile "org.springframework.boot:spring-boot-starter-web:1.0.0.RC4"
    compile "org.springframework.data:spring-data-commons:1.6.2.RELEASE"
    compile "org.springframework.data:spring-data-mongodb:1.4.0.RELEASE"
    compile "org.mongodb:mongo-java-driver:2.9.1"
}

task startServer(type: ExecWait, dependsOn: ['build']) {
    command 'java -jar build/libs/zim-service.jar'
    ready 'Started Application'
    directory '.'
}

task stopServer << {
    def pidFile = file('.gradle-exec-wait.pid')
    if(!pidFile.exists()) throw new GradleException("No server running!")

    def pid = pidFile.text
    def cmd = "kill $pid"
    def process = cmd.execute()
    process.waitFor()
    pidFile.delete()
}

class ExecWait extends DefaultTask {
    String command
    String ready
    String directory

    @TaskAction
    def spawnProcess() {

        def pidFile = new File('.gradle-exec-wait.pid')
        if(pidFile.exists()) throw new GradleException("Server already running!")

        def builder = new ProcessBuilder(command.split(' '))
        builder.redirectErrorStream(true)
        builder.directory(new File(directory))
        def process = builder.start()

        def f = process.class.getDeclaredField("pid")
        f.accessible = true
        def pid = f.getInt(process)
        pidFile << pid

        def stdout = process.getInputStream()
        def reader = new BufferedReader(new InputStreamReader(stdout))

        def line
        while ((line = reader.readLine()) != null) {
            println line
            if (line.contains(ready)) {
                println "$command is ready"
                break;
            }
        }
    }
}
